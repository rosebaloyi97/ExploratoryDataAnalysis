# -*- coding: utf-8 -*-
"""Exploratory Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aIjpXlHhfsEGs7RGmPOiRB5lFuGf7H6p
"""

#part 1
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from scipy.stats import norm

df=pd.read_csv('/content/Iris.csv')
df.head()

#part 2
# Display the summary information of the DataFrame
df.info()

# Print the descriptive statistics of the numerical columns
print(df.describe())

#part 3
#checking for missing values
missing_values =df.isnull().sum()
#filling missing values
filled_values= df.fillna(df.select_dtypes(include=[np.number]).mean(), inplace=True)
print(missing_values)

#checking for duplicated rows
duplicated_rows =df.duplicated().sum()
#dropping duplicated row
df.drop_duplicates(inplace=True)
print(duplicated_rows)

#part 4
#histogram
df.hist(bins=20, figsize=(10, 8))
plt.suptitle('Histograms of Numerical Columns', fontsize=16)
plt.show()

#boxplot
# Plot boxplots for each numerical column
plt.figure(figsize=(12, 10))  # Adjusted size to fit all plots

for i, column in enumerate(df.columns[:-1], 1):  # Excluding the 'Species' column
    plt.subplot(2, 3, i)  # Use a 2x3 grid
    sns.boxplot(y=df[column])
    plt.title(f'Boxplot of {column}')

plt.tight_layout()
plt.show()

#Part 5
#Bivariate Analysis

#Scatter plot
sns.pairplot(df, vars =['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm'])
plt.show()


# Compute the correlation matrix
num_columns = df.columns[:-1]
correlation_matrix = df[num_columns].corr()

# Plot the correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Heatmap')
plt.show()

#part 6
#bar plot
df['Species'].value_counts().plot(kind='bar')
plt.title('Distribution of Species')
plt.xlabel('Species')
plt.ylabel('Count')
plt.show()

#pie chart
plt.figure(figsize=(8, 8))
df['Species'].value_counts().plot.pie(autopct='%1.1f%%', colors=sns.color_palette('pastel'))
plt.title('Proportion of Each Species')
plt.ylabel('')  # Hides the y-label for a cleaner look
plt.show()

#Part 7
#Pairplot
sns.pairplot(df, hue='Species')
plt.suptitle('Pairwise Relationships Colored by Species', y=1.02)
plt.show()

#Part 8
#Join plot

# Ensuring the DataFrame columns are  named correctly
print(df.columns)

# Joint plot with correct column names
sns.jointplot(x='SepalLengthCm', y='SepalWidthCm', data=df, kind='scatter')
plt.show()

#Violin plot
sns.violinplot(data=df, x='Species', y='SepalLengthCm')
plt.title('Violin Plot of SepalLengthCm by Species')
plt.show()

#Part 9
# Create an instance of StandardScaler
scaler = StandardScaler()

# Exclude 'Id' from scaling, only standardize the other numerical features
numerical_cols = df.columns[1:-1]  # Excluding the 'Id' and 'Species' columns

# Apply the scaler to the selected numerical columns
df[numerical_cols] = scaler.fit_transform(df[numerical_cols])

# Check the standardized data
print(df.head())

df_encoded = pd.get_dummies(df, columns=['Species'])

# Convert boolean columns to integers
df_encoded[['Species_Iris-setosa', 'Species_Iris-versicolor', 'Species_Iris-virginica']] = df_encoded[['Species_Iris-setosa', 'Species_Iris-versicolor', 'Species_Iris-virginica']].astype(int)

# Check the encoded data
print(df_encoded.head())

#Part 10
#Save

# Save the processed DataFrame to a CSV file
df_encoded.to_csv('processed_iris_data.csv', index=False)